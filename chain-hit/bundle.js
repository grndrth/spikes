/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	window.onload = function () {
	
	  var canvas = document.getElementById("canvas");
	  var ctx = canvas.getContext("2d");
	  var canvasSmoke = document.getElementById("canvas-smoke");
	  var ctxs = canvasSmoke.getContext("2d");
	  var towerImg = new Image();
	  var qualm = new Image();
	  towerImg.onload = function () {
	    qualm.onload = start;
	    qualm.src = "qualm.png";
	  };
	  towerImg.src = "tower.png";
	  var enemy1 = { x: 100, y: 500, radius: 15 };
	  var enemy2 = { x: -100, y: 500, radius: 15 };
	  var tower1 = { x: 500, y: 200, radius: 25 };
	  var factor = 2;
	  var targetFactor = 0;
	  var counter = 0;
	  var status = 0; //idle, 1: shooting, 2: reloading
	  var enemyFactor = 0;
	
	  function animationLoop() {
	    if (counter <= 800) {
	      window.requestAnimationFrame(animationLoop);
	    }
	    ctxs.globalAlpha = 1;
	    ctx.clearRect(0, 0, 800, 600);
	    ctxs.clearRect(0, 0, 800, 600);
	
	    drawEnemy(enemy1, ctx);
	    drawEnemy(enemy2, ctx);
	
	    if (counter > 120 && counter <= 400) {
	      status = 1;
	    } else if (counter > 300 && counter <= 550) {
	      status = 2;
	    } else {
	      status = 0;
	    }
	
	    switch (status) {
	      case 0:
	        drawIdleTower(tower1, ctx, towerImg, 0, enemy1);
	        break;
	      case 1:
	        var smoke = calcSmokeTarget(enemy1, tower1, factor, targetFactor);
	
	        var _calcStartingPoint = calcStartingPoint(smoke, tower1);
	
	        var startX = _calcStartingPoint.startX;
	        var startY = _calcStartingPoint.startY;
	
	        var startingAngle = calcStartingAngle(smoke, tower1, startX);
	        if (targetFactor < 1) {
	          targetFactor += 1 / 60;
	        } else {
	          targetFactor = 1;
	        }
	        drawRotatingTower(tower1, ctx, towerImg, status, startingAngle);
	        // drawSmoke(enemy1, tower1, factor, targetFactor, smoke, startX, startY, startingAngle, ctxs);
	        drawChainSmoke(enemy1, enemy2, ctxs, qualm);
	        break;
	      case 2:
	        drawIdleTower(tower1, ctx, towerImg, 0, enemy1);
	        break;
	      default:
	
	    }
	
	    // if(counter > 120 && counter <= 600) {
	    //   status = 1;
	    // } else {
	    //   status = 0;
	    // }
	    //
	    // if (status > 0) {
	    //   drawSmoke(enemy1, tower1, factor, targetFactor);
	    //   if(targetFactor < 1) {
	    //     targetFactor += 1/60;
	    //   } else {
	    //     targetFactor = 1;
	    //   }
	    // } else if (status === 0 && targetFactor > 0) {
	    //   drawCircularSmoke(enemy1, ctx, factor);
	    //   // Smoke soll sich zum Turm hinbewegen
	    //   targetFactor -= 1 / 60;
	    // }
	    //
	    // if (status > 0 && targetFactor >= 1) {
	    //   drawSmoke(enemy2, enemy1, 1.5, enemyFactor);
	    //   if(enemyFactor < 1) {
	    //     enemyFactor += 1/60;
	    //   } else {
	    //     enemyFactor = 1;
	    //   }
	    // }
	
	    // drawTower(tower1, ctx, towerImg, status, enemy1);
	
	    enemy1.x += 1;
	    enemy2.x += 1;
	    enemy1.y -= 0;
	    counter += 1;
	  }
	
	  function calcStartingPoint(target, tower) {
	    var eX = target.x;
	    var eY = target.y;
	    var rE = target.radius;
	    var tX = tower.x;
	    var tY = tower.y;
	
	    var deltaY = -(eX - tX);
	    var deltaX = eY - tY;
	    var factor = rE / Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    var startX = eX + deltaX * factor;
	    var startY = eY + deltaY * factor;
	    return { startX: startX, startY: startY };
	  }
	
	  function calcStartingAngle(target, tower, startX) {
	    var eX = target.x;
	    var rE = target.radius;
	    var tX = tower.x;
	    // let {startX} = start;
	
	    var angle = undefined;
	    if (eX <= tX) {
	      angle = Math.PI - Math.acos((eX - startX) / rE);
	    } else {
	      angle = Math.PI + Math.acos((eX - startX) / rE);
	    }
	    return angle;
	  }
	
	  function calcSmokeTarget(enemy, tower, factor, targetFactor) {
	    var eX = enemy.x;
	    var eY = enemy.y;
	    var eR = enemy.radius;
	    var tX = tower.x;
	    var tY = tower.y;
	
	    var x = tX + targetFactor * (eX - tX);
	    var y = tY + targetFactor * (eY - tY);
	    var radius = eR * factor * targetFactor;
	    return { x: x, y: y, radius: radius };
	  }
	
	  function drawEnemy(enemy, ctx) {
	    ctx.beginPath();
	    ctx.arc(enemy.x, enemy.y, enemy.radius, 0, 2 * Math.PI);
	    ctx.fillStyle = "red";
	    ctx.fill();
	    ctx.closePath();
	  }
	
	  function drawIdleTower(tower, ctx, img, status) {
	    ctx.drawImage(img, 0, status * 70, 60, 60, tower.x - tower.radius, tower.y - tower.radius, 2 * tower.radius, 2 * tower.radius);
	  }
	
	  function drawRotatingTower(tower, ctx, img, status, startingAngle) {
	    ctx.save();
	    ctx.translate(tower.x, tower.y);
	    ctx.rotate(startingAngle - Math.PI);
	    ctx.drawImage(img, 0, status * 70, 60, 60, -tower.radius, -tower.radius, 2 * tower.radius, 2 * tower.radius);
	    ctx.restore();
	  }
	
	  function drawSmoke(enemy, tower, factor, targetFactor, smoke, startX, startY, startingAngle, ctx) {
	    var endAngle = startingAngle + Math.PI;
	
	    ctx.save();
	    ctx.beginPath();
	    ctx.moveTo(tower.x, tower.y);
	    ctx.lineTo(startX, startY);
	    ctx.arc(smoke.x, smoke.y, smoke.radius, startingAngle, endAngle, false);
	    ctx.lineTo(tower.x, tower.y);
	    ctx.closePath();
	    ctx.clip();
	    ctx.drawImage(qualm, 0, 0, 800, 600);
	    ctx.restore();
	  }
	
	  function drawChainSmoke(enemy, target, ctx, img) {
	    var x = target.x;
	    var y = target.y;
	    var r = target.radius;
	    // let {px1, px2, px3, px4, py1, py2, py3, py4} = calcRectPoints(enemy, target);
	
	    var points = calcRectPoints(enemy, target);
	    // let points = {px1: 100, px2: 400, px3: 400, px4: 100, py1: 100, py2: 100, py3: 200, py4: 200};
	    // let target1 = {x: 110, y: 120, radius: 50};
	
	    ctx.drawImage(img, 0, 0, 800, 600);
	
	    // ctx.globalCompositeOperation='destination-in';
	
	    drawComp(ctx, points, target);
	
	    // ctx.globalCompositeOperation='source-over';
	  }
	
	  function drawComp(ctx, points, target) {
	    var x = target.x;
	    var y = target.y;
	    var r = target.radius;
	    var px1 = points.px1;
	    var px2 = points.px2;
	    var px3 = points.px3;
	    var px4 = points.px4;
	    var py1 = points.py1;
	    var py2 = points.py2;
	    var py3 = points.py3;
	    var py4 = points.py4;
	
	    ctx.beginPath();
	    ctx.arc(x, y, r * 1.5, 0, 2 * Math.PI);
	    ctx.moveTo(px3, py3);
	    ctx.lineTo(px1, py1);
	    ctx.lineTo(px2, py2);
	    ctx.lineTo(px4, py4);
	    // ctx.moveTo(px1, py1);
	    // ctx.lineTo(px2, py2);
	    // ctx.lineTo(px3, py3);
	    // ctx.lineTo(px4, py4);
	
	    ctx.fill();
	  }
	
	  function calcRectPoints(enemy, target) {
	    var x1 = enemy.x;
	    var y1 = enemy.y;
	    var x2 = target.x;
	    var y2 = target.y;
	    var r2 = target.radius;
	
	    var deltaX = -(y1 - y2);
	    var deltaY = -(x1 - x2);
	    var width = r2 / Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    var px1 = Math.floor(x1 - 0.5 * width * deltaX);
	    var px2 = Math.floor(x1 + 0.5 * width * deltaX);
	    var px3 = Math.floor(x2 - 0.5 * width * deltaX);
	    var px4 = Math.floor(x2 + 0.5 * width * deltaX);
	    var py1 = Math.floor(y1 - 0.5 * width * deltaY);
	    var py2 = Math.floor(y1 + 0.5 * width * deltaY);
	    var py3 = Math.floor(y2 - 0.5 * width * deltaY);
	    var py4 = Math.floor(y2 + 0.5 * width * deltaY);
	    return { px1: px1, px2: px2, px3: px3, px4: px4, py1: py1, py2: py2, py3: py3, py4: py4 };
	  }
	
	  function start() {
	    animationLoop();
	  }
	};
	
	// // draw all rects with strokes
	// ctx.beginPath();
	// ctx.moveTo(10, 10);
	// ctx.lineTo(60, 10);
	// ctx.lineTo(60, 60);
	// ctx.lineTo(10, 60);
	// ctx.lineTo(10, 10);
	// ctx.closePath();
	// ctx.arc(60, 60, 20, 0, 2 * Math.PI);
	// ctx.stroke();
	//
	// // set compositing to erase existing drawings
	// // where the new drawings are drawn
	// ctx.globalCompositeOperation='destination-out';
	//
	// // fill all rects
	// // This "erases" all but the outline stroke
	// ctx.beginPath();
	// ctx.moveTo(10, 10);
	// ctx.lineTo(60, 10);
	// ctx.lineTo(60, 60);
	// ctx.lineTo(10, 60);
	// ctx.lineTo(10, 10);
	// ctx.closePath();
	// ctx.arc(60, 60, 20, 0, 2 * Math.PI);
	// ctx.fillStyle = "black"
	// ctx.fill();

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZWU5YzhjYmUzYjk1NDYyNDFhYjUiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3RDQSxPQUFNLENBQUMsTUFBTSxHQUFHLFlBQVk7O0FBRTFCLE9BQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0MsT0FBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxPQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzFELE9BQUksSUFBSSxHQUFHLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDeEMsT0FBSSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUMzQixPQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ3hCLFdBQVEsQ0FBQyxNQUFNLEdBQUcsWUFBTTtBQUN0QixVQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUNyQixVQUFLLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztJQUN6QixDQUFDO0FBQ0YsV0FBUSxDQUFDLEdBQUcsR0FBRyxXQUFXLENBQUM7QUFDM0IsT0FBSSxNQUFNLEdBQUcsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQyxDQUFDO0FBQzFDLE9BQUksTUFBTSxHQUFHLEVBQUMsQ0FBQyxF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SyxDQUFDLEVBQUUsR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELFNBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUM7QUFDaEQsWUFBTyxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUUsR0FBRyxFQUFILEdBQUcsRUFBRSxHQUFHLEVBQUgsR0FBRyxFQUFFLEdBQUcsRUFBSCxHQUFHLEVBQUUsR0FBRyxFQUFILEdBQUcsRUFBRSxHQUFHLEVBQUgsR0FBRyxFQUFFLEdBQUcsRUFBSCxHQUFHLEVBQUUsR0FBRyxFQUFILEdBQUcsRUFBQyxDQUFDO0lBQ2pEOztBQUVELFlBQVMsS0FBSyxHQUFHO0FBQ2Ysa0JBQWEsRUFBRSxDQUFDO0lBQ2pCO0VBRUYiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCBlZTljOGNiZTNiOTU0NjI0MWFiNVxuICoqLyIsIndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xuICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgbGV0IGNhbnZhc1Ntb2tlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXMtc21va2VcIik7XG4gIGxldCBjdHhzID0gY2FudmFzU21va2UuZ2V0Q29udGV4dChcIjJkXCIpO1xuICBsZXQgdG93ZXJJbWcgPSBuZXcgSW1hZ2UoKTtcbiAgbGV0IHF1YWxtID0gbmV3IEltYWdlKCk7XG4gIHRvd2VySW1nLm9ubG9hZCA9ICgpID0+IHtcbiAgICBxdWFsbS5vbmxvYWQgPSBzdGFydDtcbiAgICBxdWFsbS5zcmMgPSBcInF1YWxtLnBuZ1wiO1xuICB9O1xuICB0b3dlckltZy5zcmMgPSBcInRvd2VyLnBuZ1wiO1xuICBsZXQgZW5lbXkxID0ge3g6IDEwMCwgeTogNTAwLCByYWRpdXM6IDE1fTtcbiAgbGV0IGVuZW15MiA9IHt4OiAtMTAwLCB5OiA1MDAsIHJhZGl1czogMTV9O1xuICBsZXQgdG93ZXIxID0ge3g6IDUwMCwgeTogMjAwLCByYWRpdXM6IDI1fTtcbiAgbGV0IGZhY3RvciA9IDI7XG4gIGxldCB0YXJnZXRGYWN0b3IgPSAwO1xuICBsZXQgY291bnRlciA9IDA7XG4gIGxldCBzdGF0dXMgPSAwOyAvL2lkbGUsIDE6IHNob290aW5nLCAyOiByZWxvYWRpbmdcbiAgbGV0IGVuZW15RmFjdG9yID0gMDtcblxuICBmdW5jdGlvbiBhbmltYXRpb25Mb29wKCkge1xuICAgICAgaWYoY291bnRlciA8PSA4MDApIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25Mb29wKTtcbiAgICAgIH1cbiAgICAgIGN0eHMuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCA4MDAsIDYwMCk7XG4gICAgICBjdHhzLmNsZWFyUmVjdCgwLCAwLCA4MDAsIDYwMCk7XG5cbiAgICAgIGRyYXdFbmVteShlbmVteTEsIGN0eCk7XG4gICAgICBkcmF3RW5lbXkoZW5lbXkyLCBjdHgpO1xuXG4gICAgICBpZiAoY291bnRlciA+IDEyMCAmJiBjb3VudGVyIDw9IDQwMCkge1xuICAgICAgICBzdGF0dXMgPSAxO1xuICAgICAgfSBlbHNlIGlmIChjb3VudGVyID4gMzAwICYmIGNvdW50ZXIgPD0gNTUwKSB7XG4gICAgICAgIHN0YXR1cyA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBkcmF3SWRsZVRvd2VyKHRvd2VyMSwgY3R4LCB0b3dlckltZywgMCwgZW5lbXkxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGxldCBzbW9rZSA9IGNhbGNTbW9rZVRhcmdldChlbmVteTEsIHRvd2VyMSwgZmFjdG9yLCB0YXJnZXRGYWN0b3IpO1xuICAgICAgICAgIGxldCB7c3RhcnRYLCBzdGFydFl9ID0gY2FsY1N0YXJ0aW5nUG9pbnQoc21va2UsIHRvd2VyMSk7XG4gICAgICAgICAgbGV0IHN0YXJ0aW5nQW5nbGUgPSBjYWxjU3RhcnRpbmdBbmdsZShzbW9rZSwgdG93ZXIxLCBzdGFydFgpO1xuICAgICAgICAgIGlmKHRhcmdldEZhY3RvciA8IDEpIHtcbiAgICAgICAgICAgIHRhcmdldEZhY3RvciArPSAxLzYwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRGYWN0b3IgPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICAgIGRyYXdSb3RhdGluZ1Rvd2VyKHRvd2VyMSwgY3R4LCB0b3dlckltZywgc3RhdHVzLCBzdGFydGluZ0FuZ2xlKTtcbiAgICAgICAgICAgIC8vIGRyYXdTbW9rZShlbmVteTEsIHRvd2VyMSwgZmFjdG9yLCB0YXJnZXRGYWN0b3IsIHNtb2tlLCBzdGFydFgsIHN0YXJ0WSwgc3RhcnRpbmdBbmdsZSwgY3R4cyk7XG4gICAgICAgICAgICBkcmF3Q2hhaW5TbW9rZShlbmVteTEsIGVuZW15MiwgY3R4cywgcXVhbG0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBkcmF3SWRsZVRvd2VyKHRvd2VyMSwgY3R4LCB0b3dlckltZywgMCwgZW5lbXkxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuXG4gICAgICB9XG5cbiAgICAgIC8vIGlmKGNvdW50ZXIgPiAxMjAgJiYgY291bnRlciA8PSA2MDApIHtcbiAgICAgIC8vICAgc3RhdHVzID0gMTtcbiAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAvLyAgIHN0YXR1cyA9IDA7XG4gICAgICAvLyB9XG4gICAgICAvL1xuICAgICAgLy8gaWYgKHN0YXR1cyA+IDApIHtcbiAgICAgIC8vICAgZHJhd1Ntb2tlKGVuZW15MSwgdG93ZXIxLCBmYWN0b3IsIHRhcmdldEZhY3Rvcik7XG4gICAgICAvLyAgIGlmKHRhcmdldEZhY3RvciA8IDEpIHtcbiAgICAgIC8vICAgICB0YXJnZXRGYWN0b3IgKz0gMS82MDtcbiAgICAgIC8vICAgfSBlbHNlIHtcbiAgICAgIC8vICAgICB0YXJnZXRGYWN0b3IgPSAxO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gMCAmJiB0YXJnZXRGYWN0b3IgPiAwKSB7XG4gICAgICAvLyAgIGRyYXdDaXJjdWxhclNtb2tlKGVuZW15MSwgY3R4LCBmYWN0b3IpO1xuICAgICAgLy8gICAvLyBTbW9rZSBzb2xsIHNpY2ggenVtIFR1cm0gaGluYmV3ZWdlblxuICAgICAgLy8gICB0YXJnZXRGYWN0b3IgLT0gMSAvIDYwO1xuICAgICAgLy8gfVxuICAgICAgLy9cbiAgICAgIC8vIGlmIChzdGF0dXMgPiAwICYmIHRhcmdldEZhY3RvciA+PSAxKSB7XG4gICAgICAvLyAgIGRyYXdTbW9rZShlbmVteTIsIGVuZW15MSwgMS41LCBlbmVteUZhY3Rvcik7XG4gICAgICAvLyAgIGlmKGVuZW15RmFjdG9yIDwgMSkge1xuICAgICAgLy8gICAgIGVuZW15RmFjdG9yICs9IDEvNjA7XG4gICAgICAvLyAgIH0gZWxzZSB7XG4gICAgICAvLyAgICAgZW5lbXlGYWN0b3IgPSAxO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9XG5cblxuICAgICAgLy8gZHJhd1Rvd2VyKHRvd2VyMSwgY3R4LCB0b3dlckltZywgc3RhdHVzLCBlbmVteTEpO1xuXG4gICAgICBlbmVteTEueCArPSAxO1xuICAgICAgZW5lbXkyLnggKz0gMTtcbiAgICAgIGVuZW15MS55IC09IDA7XG4gICAgICBjb3VudGVyICs9IDE7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxjU3RhcnRpbmdQb2ludCh0YXJnZXQsIHRvd2VyKSB7XG4gICAgbGV0IHt4OiBlWCwgeTogZVksIHJhZGl1czogckV9ID0gdGFyZ2V0O1xuICAgIGxldCB7eDogdFgsIHk6IHRZfSA9IHRvd2VyO1xuICAgIGxldCBkZWx0YVkgPSAtKGVYIC0gdFgpO1xuICAgIGxldCBkZWx0YVggPSBlWSAtIHRZO1xuICAgIGxldCBmYWN0b3IgPSByRSAvIE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVgsIDIpICsgTWF0aC5wb3coZGVsdGFZLCAyKSk7XG4gICAgbGV0IHN0YXJ0WCA9IGVYICsgZGVsdGFYICogZmFjdG9yO1xuICAgIGxldCBzdGFydFkgPSBlWSArIGRlbHRhWSAqIGZhY3RvcjtcbiAgICByZXR1cm4ge3N0YXJ0WCwgc3RhcnRZfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGNTdGFydGluZ0FuZ2xlKHRhcmdldCwgdG93ZXIsIHN0YXJ0WCkge1xuICAgIGxldCB7eDogZVgsIHJhZGl1czogckV9ID0gdGFyZ2V0O1xuICAgIGxldCB7eDogdFh9ID0gdG93ZXI7XG4gICAgLy8gbGV0IHtzdGFydFh9ID0gc3RhcnQ7XG4gICAgbGV0IGFuZ2xlO1xuICAgIGlmKGVYIDw9IHRYKSB7XG4gICAgICBhbmdsZSA9IE1hdGguUEkgLSBNYXRoLmFjb3MoKGVYIC0gc3RhcnRYKSAvIHJFKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5nbGUgPSBNYXRoLlBJICsgTWF0aC5hY29zKChlWC1zdGFydFgpIC8gckUpO1xuICAgIH1cbiAgICByZXR1cm4gYW5nbGU7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxjU21va2VUYXJnZXQoZW5lbXksIHRvd2VyLCBmYWN0b3IsIHRhcmdldEZhY3Rvcikge1xuICAgIGxldCB7eDogZVgsIHk6IGVZLCByYWRpdXM6IGVSfSA9IGVuZW15O1xuICAgIGxldCB7eDogdFgsIHk6IHRZfSA9IHRvd2VyO1xuICAgIGxldCB4ID0gdFggKyB0YXJnZXRGYWN0b3IgKiAoZVggLSB0WCk7XG4gICAgbGV0IHkgPSB0WSArIHRhcmdldEZhY3RvciAqIChlWSAtIHRZKTtcbiAgICBsZXQgcmFkaXVzID0gZVIgKiBmYWN0b3IgKiB0YXJnZXRGYWN0b3I7XG4gICAgcmV0dXJuIHt4LCB5LCByYWRpdXN9O1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhd0VuZW15KGVuZW15LCBjdHgpIHtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyhlbmVteS54LCBlbmVteS55LCBlbmVteS5yYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICBjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdJZGxlVG93ZXIodG93ZXIsIGN0eCwgaW1nLCBzdGF0dXMpIHtcbiAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgc3RhdHVzICogNzAsIDYwLCA2MCwgdG93ZXIueCAtIHRvd2VyLnJhZGl1cywgdG93ZXIueSAtIHRvd2VyLnJhZGl1cywgMiAqIHRvd2VyLnJhZGl1cywgMiAqIHRvd2VyLnJhZGl1cyk7XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3Um90YXRpbmdUb3dlcih0b3dlciwgY3R4LCBpbWcsIHN0YXR1cywgc3RhcnRpbmdBbmdsZSkge1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2xhdGUodG93ZXIueCwgdG93ZXIueSk7XG4gICAgICBjdHgucm90YXRlKHN0YXJ0aW5nQW5nbGUgLSBNYXRoLlBJKTtcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCBzdGF0dXMgKiA3MCwgNjAsIDYwLCAtdG93ZXIucmFkaXVzICwgLXRvd2VyLnJhZGl1cywgMiAqIHRvd2VyLnJhZGl1cywgMiAqIHRvd2VyLnJhZGl1cyk7XG4gICAgICBjdHgucmVzdG9yZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZHJhd1Ntb2tlKGVuZW15LCB0b3dlciwgZmFjdG9yLCB0YXJnZXRGYWN0b3IsIHNtb2tlLCBzdGFydFgsIHN0YXJ0WSwgc3RhcnRpbmdBbmdsZSwgY3R4KSB7XG4gICAgbGV0IGVuZEFuZ2xlID0gc3RhcnRpbmdBbmdsZSArIE1hdGguUEk7XG5cbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHRvd2VyLngsIHRvd2VyLnkpO1xuICAgIGN0eC5saW5lVG8oc3RhcnRYLCBzdGFydFkpO1xuICAgIGN0eC5hcmMoc21va2UueCwgc21va2UueSwgc21va2UucmFkaXVzLCBzdGFydGluZ0FuZ2xlLCBlbmRBbmdsZSwgZmFsc2UpO1xuICAgIGN0eC5saW5lVG8odG93ZXIueCwgdG93ZXIueSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5jbGlwKCk7XG4gICAgY3R4LmRyYXdJbWFnZShxdWFsbSwgMCwgMCwgODAwLCA2MDApO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3Q2hhaW5TbW9rZShlbmVteSwgdGFyZ2V0LCBjdHgsIGltZykge1xuICAgIGxldCB7eDogeCwgeTogeSwgcmFkaXVzOiByfSA9IHRhcmdldDtcbiAgICAvLyBsZXQge3B4MSwgcHgyLCBweDMsIHB4NCwgcHkxLCBweTIsIHB5MywgcHk0fSA9IGNhbGNSZWN0UG9pbnRzKGVuZW15LCB0YXJnZXQpO1xuICAgIGxldCBwb2ludHMgPSBjYWxjUmVjdFBvaW50cyhlbmVteSwgdGFyZ2V0KTtcbiAgICAvLyBsZXQgcG9pbnRzID0ge3B4MTogMTAwLCBweDI6IDQwMCwgcHgzOiA0MDAsIHB4NDogMTAwLCBweTE6IDEwMCwgcHkyOiAxMDAsIHB5MzogMjAwLCBweTQ6IDIwMH07XG4gICAgLy8gbGV0IHRhcmdldDEgPSB7eDogMTEwLCB5OiAxMjAsIHJhZGl1czogNTB9O1xuXG4gICAgY3R4LmRyYXdJbWFnZShpbWcgLDAsIDAsIDgwMCwgNjAwKTtcblxuICAgIC8vIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249J2Rlc3RpbmF0aW9uLWluJztcblxuICAgIGRyYXdDb21wKGN0eCwgcG9pbnRzLCB0YXJnZXQpO1xuXG4gICAgLy8gY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbj0nc291cmNlLW92ZXInO1xuXG4gIH1cblxuICBmdW5jdGlvbiBkcmF3Q29tcChjdHgsIHBvaW50cywgdGFyZ2V0KSB7XG4gICAgbGV0IHt4OiB4LCB5OiB5LCByYWRpdXM6IHJ9ID0gdGFyZ2V0O1xuICAgIGxldCB7cHgxLCBweDIsIHB4MywgcHg0LCBweTEsIHB5MiwgcHkzLCBweTR9ID0gcG9pbnRzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHgsIHksIHIgKiAxLjUsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICBjdHgubW92ZVRvKHB4MywgcHkzKTtcbiAgICBjdHgubGluZVRvKHB4MSwgcHkxKTtcbiAgICBjdHgubGluZVRvKHB4MiwgcHkyKTtcbiAgICBjdHgubGluZVRvKHB4NCwgcHk0KTtcbiAgICAvLyBjdHgubW92ZVRvKHB4MSwgcHkxKTtcbiAgICAvLyBjdHgubGluZVRvKHB4MiwgcHkyKTtcbiAgICAvLyBjdHgubGluZVRvKHB4MywgcHkzKTtcbiAgICAvLyBjdHgubGluZVRvKHB4NCwgcHk0KTtcblxuICAgIGN0eC5maWxsKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxjUmVjdFBvaW50cyhlbmVteSwgdGFyZ2V0KSB7XG4gICAgbGV0IHt4OiB4MSwgeTogeTF9ID0gZW5lbXk7XG4gICAgbGV0IHt4OiB4MiwgeTogeTIsIHJhZGl1czogcjJ9ID0gdGFyZ2V0O1xuXG4gICAgbGV0IGRlbHRhWCA9IC0gKHkxIC0geTIpO1xuICAgIGxldCBkZWx0YVkgPSAtICh4MSAtIHgyKTtcbiAgICBsZXQgd2lkdGggPSByMiAvIE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVgsIDIpICsgTWF0aC5wb3coZGVsdGFZLCAyKSk7XG4gICAgbGV0IHB4MSA9IE1hdGguZmxvb3IoeDEgLSAwLjUgKiB3aWR0aCAqIGRlbHRhWCk7XG4gICAgbGV0IHB4MiA9IE1hdGguZmxvb3IoeDEgKyAwLjUgKiB3aWR0aCAqIGRlbHRhWCk7XG4gICAgbGV0IHB4MyA9IE1hdGguZmxvb3IoeDIgLSAwLjUgKiB3aWR0aCAqIGRlbHRhWCk7XG4gICAgbGV0IHB4NCA9IE1hdGguZmxvb3IoeDIgKyAwLjUgKiB3aWR0aCAqIGRlbHRhWCk7XG4gICAgbGV0IHB5MSA9IE1hdGguZmxvb3IoeTEgLSAwLjUgKiB3aWR0aCAqIGRlbHRhWSk7XG4gICAgbGV0IHB5MiA9IE1hdGguZmxvb3IoeTEgKyAwLjUgKiB3aWR0aCAqIGRlbHRhWSk7XG4gICAgbGV0IHB5MyA9IE1hdGguZmxvb3IoeTIgLSAwLjUgKiB3aWR0aCAqIGRlbHRhWSk7XG4gICAgbGV0IHB5NCA9IE1hdGguZmxvb3IoeTIgKyAwLjUgKiB3aWR0aCAqIGRlbHRhWSk7XG4gICAgcmV0dXJuIHtweDEsIHB4MiwgcHgzLCBweDQsIHB5MSwgcHkyLCBweTMsIHB5NH07XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICBhbmltYXRpb25Mb29wKCk7XG4gIH1cblxufTtcblxuXG4vLyAvLyBkcmF3IGFsbCByZWN0cyB3aXRoIHN0cm9rZXNcbi8vIGN0eC5iZWdpblBhdGgoKTtcbi8vIGN0eC5tb3ZlVG8oMTAsIDEwKTtcbi8vIGN0eC5saW5lVG8oNjAsIDEwKTtcbi8vIGN0eC5saW5lVG8oNjAsIDYwKTtcbi8vIGN0eC5saW5lVG8oMTAsIDYwKTtcbi8vIGN0eC5saW5lVG8oMTAsIDEwKTtcbi8vIGN0eC5jbG9zZVBhdGgoKTtcbi8vIGN0eC5hcmMoNjAsIDYwLCAyMCwgMCwgMiAqIE1hdGguUEkpO1xuLy8gY3R4LnN0cm9rZSgpO1xuLy9cbi8vIC8vIHNldCBjb21wb3NpdGluZyB0byBlcmFzZSBleGlzdGluZyBkcmF3aW5nc1xuLy8gLy8gd2hlcmUgdGhlIG5ldyBkcmF3aW5ncyBhcmUgZHJhd25cbi8vIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249J2Rlc3RpbmF0aW9uLW91dCc7XG4vL1xuLy8gLy8gZmlsbCBhbGwgcmVjdHNcbi8vIC8vIFRoaXMgXCJlcmFzZXNcIiBhbGwgYnV0IHRoZSBvdXRsaW5lIHN0cm9rZVxuLy8gY3R4LmJlZ2luUGF0aCgpO1xuLy8gY3R4Lm1vdmVUbygxMCwgMTApO1xuLy8gY3R4LmxpbmVUbyg2MCwgMTApO1xuLy8gY3R4LmxpbmVUbyg2MCwgNjApO1xuLy8gY3R4LmxpbmVUbygxMCwgNjApO1xuLy8gY3R4LmxpbmVUbygxMCwgMTApO1xuLy8gY3R4LmNsb3NlUGF0aCgpO1xuLy8gY3R4LmFyYyg2MCwgNjAsIDIwLCAwLCAyICogTWF0aC5QSSk7XG4vLyBjdHguZmlsbFN0eWxlID0gXCJibGFja1wiXG4vLyBjdHguZmlsbCgpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9pbmRleC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=