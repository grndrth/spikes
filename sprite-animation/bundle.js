/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	window.onload = function () {
	
	  var canvas = document.getElementById("canvas");
	  var ctx = canvas.getContext("2d");
	  var qualm = new Image();
	  qualm.onload = start;
	  qualm.src = "qualm.png";
	  var enemy1 = { x: 200, y: 400, radius: 15 };
	  var tower1 = { x: 500, y: 500, radius: 25 };
	  var enemy2 = { x: 600, y: 150, radius: 15 };
	  var tower2 = { x: 50, y: 50, radius: 25 };
	  var factor = 2;
	  var targetFactor = 0;
	  var counter = 0;
	
	  function animationLoop() {
	
	    if (counter <= 400) {
	      window.requestAnimationFrame(animationLoop);
	    }
	
	    ctx.clearRect(0, 0, 800, 600);
	    drawTower(tower1, ctx);
	    drawTower(tower2, ctx);
	    drawEnemy(enemy1, ctx);
	    drawEnemy(enemy2, ctx);
	    drawSmoke(enemy1, tower1, factor, targetFactor);
	    drawSmoke(enemy2, tower2, factor, targetFactor);
	
	    enemy1.x += 1;
	    enemy1.y -= 0.25;
	    var oldX = enemy2.x;
	    enemy2.x -= 1;
	    enemy2.y = -0.00875 * oldX * oldX + 7 * oldX - 900;
	    if (targetFactor < 1) {
	      targetFactor += 1 / 60;
	    } else {
	      targetFactor = 1;
	    }
	    counter += 1;
	  }
	
	  function calcStartingPoint(target, tower) {
	    var eX = target.x;
	    var eY = target.y;
	    var rE = target.radius;
	    var tX = tower.x;
	    var tY = tower.y;
	
	    var deltaY = -(eX - tX);
	    var deltaX = eY - tY;
	    var factor = rE / Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    var startX = eX + deltaX * factor;
	    var startY = eY + deltaY * factor;
	    return { startX: startX, startY: startY };
	  }
	
	  function calcStartingAngle(target, tower, startX) {
	    var eX = target.x;
	    var rE = target.radius;
	    var tX = tower.x;
	    // let {startX} = start;
	
	    var angle = undefined;
	    if (eX <= tX) {
	      angle = Math.PI - Math.acos((eX - startX) / rE);
	    } else {
	      angle = Math.PI + Math.acos((eX - startX) / rE);
	    }
	    return angle;
	  }
	
	  function calcSmokeTarget(enemy, tower, factor, targetFactor) {
	    var eX = enemy.x;
	    var eY = enemy.y;
	    var eR = enemy.radius;
	    var tX = tower.x;
	    var tY = tower.y;
	
	    var x = tX + targetFactor * (eX - tX);
	    var y = tY + targetFactor * (eY - tY);
	    var radius = eR * factor * targetFactor;
	    return { x: x, y: y, radius: radius };
	  }
	
	  function drawEnemy(enemy, ctx) {
	    ctx.beginPath();
	    ctx.arc(enemy.x, enemy.y, enemy.radius, 0, 2 * Math.PI);
	    ctx.fillStyle = "red";
	    ctx.fill();
	    ctx.closePath();
	  }
	
	  function drawTower(tower, ctx) {
	    ctx.beginPath();
	    ctx.fillStyle = "blue";
	    ctx.arc(tower.x, tower.y, tower.radius, 0, 2 * Math.PI);
	    ctx.fill();
	    ctx.closePath();
	  }
	
	  function drawSmoke(enemy, tower, factor, targetFactor) {
	    var smoke = calcSmokeTarget(enemy, tower, factor, targetFactor);
	
	    var _calcStartingPoint = calcStartingPoint(smoke, tower);
	
	    var startX = _calcStartingPoint.startX;
	    var startY = _calcStartingPoint.startY;
	
	    var startingAngle = calcStartingAngle(smoke, tower, startX);
	    var endAngle = startingAngle + Math.PI;
	
	    ctx.save();
	    ctx.beginPath();
	    // ctx.strokeStyle = "black";
	    // ctx.fillStyle = `rgba(150, 150, 150, ${randOp})`;
	    ctx.moveTo(tower.x, tower.y);
	    ctx.lineTo(startX, startY);
	    ctx.arc(smoke.x, smoke.y, smoke.radius, startingAngle, endAngle, false);
	    ctx.lineTo(tower.x, tower.y);
	    // ctx.stroke();
	    // ctx.fill();
	    ctx.closePath();
	    ctx.clip();
	    ctx.drawImage(qualm, 0, 0, 800, 600);
	    ctx.restore();
	  }
	
	  // function calcDistance(enemy, tower) {
	  //   let {x: eX, y: eY} = enemy;
	  //   let {x: tX, y: tY} = tower;
	  //   return Math.sqrt(Math.pow((eX - tX), 2) + Math.pow((eY - tY), 2));
	  //
	  // }
	  function start() {
	    animationLoop();
	  }
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,