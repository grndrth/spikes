/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	window.onload = function () {
	
	  var canvas = document.getElementById("canvas");
	  var ctx = canvas.getContext("2d");
	  var canvasSmoke = document.getElementById("canvas-smoke");
	  var ctxs = canvasSmoke.getContext("2d");
	  var towerImg = new Image();
	  var qualm = new Image();
	  towerImg.onload = function () {
	    qualm.onload = start;
	    qualm.src = "qualm.png";
	  };
	  towerImg.src = "tower.png";
	  var enemy1 = { x: 100, y: 500, radius: 15 };
	  var enemy2 = { x: -100, y: 500, radius: 15 };
	  var tower1 = { x: 500, y: 200, radius: 25 };
	  var factor = 2;
	  var targetFactor = 0;
	  var counter = 0;
	  var status = 0; //idle, 1: shooting, 2: reloading
	  var enemyFactor = 0;
	
	  function animationLoop() {
	
	    if (counter <= 800) {
	      window.requestAnimationFrame(animationLoop);
	    }
	    ctxs.globalAlpha = 0.5;
	    ctx.clearRect(0, 0, 800, 600);
	    ctxs.clearRect(0, 0, 800, 600);
	    drawEnemy(enemy1, ctx);
	    drawEnemy(enemy2, ctx);
	
	    if (counter > 120 && counter <= 400) {
	      status = 1;
	    } else if (counter > 300 && counter <= 550) {
	      status = 2;
	    } else {
	      status = 0;
	    }
	
	    switch (status) {
	      case 0:
	        drawIdleTower(tower1, ctx, towerImg, 0, enemy1);
	        break;
	      case 1:
	        var smoke = calcSmokeTarget(enemy1, tower1, factor, targetFactor);
	
	        var _calcStartingPoint = calcStartingPoint(smoke, tower1);
	
	        var startX = _calcStartingPoint.startX;
	        var startY = _calcStartingPoint.startY;
	
	        var startingAngle = calcStartingAngle(smoke, tower1, startX);
	        if (targetFactor < 1) {
	          targetFactor += 1 / 60;
	        } else {
	          targetFactor = 1;
	        }
	        drawRotatingTower(tower1, ctx, towerImg, status, startingAngle);
	        drawSmoke(enemy1, tower1, factor, targetFactor, smoke, startX, startY, startingAngle, ctxs);
	        drawChainSmoke(enemy1, enemy2, ctxs, 1.5, qualm);
	        break;
	      case 2:
	        drawIdleTower(tower1, ctx, towerImg, 0, enemy1);
	        break;
	      default:
	
	    }
	
	    // if(counter > 120 && counter <= 600) {
	    //   status = 1;
	    // } else {
	    //   status = 0;
	    // }
	    //
	    // if (status > 0) {
	    //   drawSmoke(enemy1, tower1, factor, targetFactor);
	    //   if(targetFactor < 1) {
	    //     targetFactor += 1/60;
	    //   } else {
	    //     targetFactor = 1;
	    //   }
	    // } else if (status === 0 && targetFactor > 0) {
	    //   drawCircularSmoke(enemy1, ctx, factor);
	    //   // Smoke soll sich zum Turm hinbewegen
	    //   targetFactor -= 1 / 60;
	    // }
	    //
	    // if (status > 0 && targetFactor >= 1) {
	    //   drawSmoke(enemy2, enemy1, 1.5, enemyFactor);
	    //   if(enemyFactor < 1) {
	    //     enemyFactor += 1/60;
	    //   } else {
	    //     enemyFactor = 1;
	    //   }
	    // }
	
	    // drawTower(tower1, ctx, towerImg, status, enemy1);
	
	    enemy1.x += 1;
	    enemy2.x += 1;
	    enemy1.y -= 0;
	    counter += 1;
	  }
	
	  function calcStartingPoint(target, tower) {
	    var eX = target.x;
	    var eY = target.y;
	    var rE = target.radius;
	    var tX = tower.x;
	    var tY = tower.y;
	
	    var deltaY = -(eX - tX);
	    var deltaX = eY - tY;
	    var factor = rE / Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    var startX = eX + deltaX * factor;
	    var startY = eY + deltaY * factor;
	    return { startX: startX, startY: startY };
	  }
	
	  function calcStartingAngle(target, tower, startX) {
	    var eX = target.x;
	    var rE = target.radius;
	    var tX = tower.x;
	    // let {startX} = start;
	
	    var angle = undefined;
	    if (eX <= tX) {
	      angle = Math.PI - Math.acos((eX - startX) / rE);
	    } else {
	      angle = Math.PI + Math.acos((eX - startX) / rE);
	    }
	    return angle;
	  }
	
	  function calcSmokeTarget(enemy, tower, factor, targetFactor) {
	    var eX = enemy.x;
	    var eY = enemy.y;
	    var eR = enemy.radius;
	    var tX = tower.x;
	    var tY = tower.y;
	
	    var x = tX + targetFactor * (eX - tX);
	    var y = tY + targetFactor * (eY - tY);
	    var radius = eR * factor * targetFactor;
	    return { x: x, y: y, radius: radius };
	  }
	
	  function drawEnemy(enemy, ctx) {
	    ctx.beginPath();
	    ctx.arc(enemy.x, enemy.y, enemy.radius, 0, 2 * Math.PI);
	    ctx.fillStyle = "red";
	    ctx.fill();
	    ctx.closePath();
	  }
	
	  function drawIdleTower(tower, ctx, img, status) {
	    ctx.drawImage(img, 0, status * 70, 60, 60, tower.x - tower.radius, tower.y - tower.radius, 2 * tower.radius, 2 * tower.radius);
	  }
	
	  function drawRotatingTower(tower, ctx, img, status, startingAngle) {
	    ctx.save();
	    ctx.translate(tower.x, tower.y);
	    ctx.rotate(startingAngle - Math.PI);
	    ctx.drawImage(img, 0, status * 70, 60, 60, -tower.radius, -tower.radius, 2 * tower.radius, 2 * tower.radius);
	    ctx.restore();
	  }
	
	  function drawSmoke(enemy, tower, factor, targetFactor, smoke, startX, startY, startingAngle, ctx) {
	    var endAngle = startingAngle + Math.PI;
	
	    ctx.save();
	    ctx.beginPath();
	    ctx.moveTo(tower.x, tower.y);
	    ctx.lineTo(startX, startY);
	    ctx.arc(smoke.x, smoke.y, smoke.radius, startingAngle, endAngle, false);
	    ctx.lineTo(tower.x, tower.y);
	    ctx.closePath();
	    ctx.clip();
	    ctx.drawImage(qualm, 0, 0, 800, 600);
	    ctx.restore();
	  }
	
	  function drawCircularSmoke(enemy, ctx, factor) {
	    var x = enemy.x;
	    var y = enemy.y;
	    var radius = enemy.radius;
	
	    ctx.beginPath();
	    ctx.fillStyle = "rgba(155, 155, 155, 0.5)";
	    ctx.arc(x, y, radius * factor, 0, 2 * Math.PI);
	    ctx.fill();
	    ctx.closePath();
	  }
	
	  function drawChainSmoke(enemy, target, ctx, factor, img) {
	    var x = target.x;
	    var y = target.y;
	    var r = target.radius;
	
	    var _calcRectPoints = calcRectPoints(enemy, target);
	
	    var px1 = _calcRectPoints.px1;
	    var px2 = _calcRectPoints.px2;
	    var px3 = _calcRectPoints.px3;
	    var px4 = _calcRectPoints.px4;
	    var py1 = _calcRectPoints.py1;
	    var py2 = _calcRectPoints.py2;
	    var py3 = _calcRectPoints.py3;
	    var py4 = _calcRectPoints.py4;
	
	    console.log(px1, px2, px3, px4, py1, py2, py3, py4);
	    ctx.save();
	    ctx.beginPath();
	    ctx.moveTo(px1, py1);
	    ctx.lineTo(px2, py2);
	    ctx.lineTo(px4, py4);
	    ctx.lineTo(px3, py3);
	    ctx.lineTo(px1, py1);
	    ctx.closePath();
	    ctx.clip();
	    ctx.drawImage(img, 0, 0, 800, 600);
	    ctx.restore();
	    ctx.save();
	    ctx.beginPath();
	    ctx.arc(x, y, r * factor, 0, 2 * Math.PI);
	    ctx.closePath();
	    ctx.clip();
	    ctx.drawImage(img, 0, 0, 800, 600);
	    ctx.restore();
	  }
	
	  function calcRectPoints(enemy, target) {
	    var x1 = enemy.x;
	    var y1 = enemy.y;
	    var r1 = enemy.radius;
	    var x2 = target.x;
	    var y2 = target.y;
	    var r2 = target.radius;
	
	    var deltaX = -(y1 - y2);
	    var deltaY = -(x1 - x2);
	    var width = r2 / Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
	    var px1 = x1 - 0.5 * width * deltaX;
	    var px2 = x1 + 0.5 * width * deltaX;
	    var px3 = x2 - 0.5 * width * deltaX;
	    var px4 = x2 + 0.5 * width * deltaX;
	    var py1 = y1 - 0.5 * width * deltaY;
	    var py2 = y1 + 0.5 * width * deltaY;
	    var py3 = y2 - 0.5 * width * deltaY;
	    var py4 = y2 + 0.5 * width * deltaY;
	    return { px1: px1, px2: px2, px3: px3, px4: px4, py1: py1, py2: py2, py3: py3, py4: py4 };
	  }
	
	  // function calcDistance(enemy, tower) {
	  //   let {x: eX, y: eY} = enemy;
	  //   let {x: tX, y: tY} = tower;
	  //   return Math.sqrt(Math.pow((eX - tX), 2) + Math.pow((eY - tY), 2));
	  //
	  // }
	  function start() {
	    animationLoop();
	  }
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,