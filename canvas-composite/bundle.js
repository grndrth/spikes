/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	window.onload = function () {
	
	  var canvas = document.getElementById("canvas");
	  var ctx = canvas.getContext("2d");
	  var qualm = new Image();
	  var pattern = undefined;
	  qualm.onload = function () {
	    pattern = ctx.createPattern(qualm, "repeat");
	    start();
	  };
	  qualm.src = "qualm.png";
	  var arc = { x: 300, y: 125, r: 50 };
	  var arc2 = { x: 100, y: 125, r: 50 };
	  var p1 = { x: 100, y: 100 };
	  var p2 = { x: 300, y: 100 };
	  var p3 = { x: 300, y: 150 };
	  var p4 = { x: 100, y: 150 };
	
	  function animationLoop() {
	
	    if (arc.x < 750) {
	      window.requestAnimationFrame(animationLoop);
	    }
	
	    ctx.clearRect(0, 0, 800, 600);
	    // ctx.fillStyle = pattern;
	    // ctx.fillRect(0, 0, 800, 600);
	
	    ctx.drawImage(qualm, 0, 0, 800, 600);
	    ctx.globalCompositeOperation = 'destination-in';
	
	    ctx.beginPath();
	    ctx.moveTo(p1.x, p1.y);
	    ctx.lineTo(p2.x, p2.y);
	    ctx.lineTo(p3.x, p3.y);
	    ctx.lineTo(p4.x, p4.y);
	    ctx.lineTo(p1.x, p1.y);
	    ctx.closePath();
	    ctx.arc(arc.x, arc.y, arc.r, 0, 2 * Math.PI);
	    ctx.arc(arc2.x, arc2.y, arc2.r, 0, 2 * Math.PI);
	    ctx.fill();
	
	    ctx.globalCompositeOperation = 'source-over';
	
	    p1.x += 1;
	    p2.x += 1;
	    p3.x += 1;
	    p4.x += 1;
	    arc.x += 1;
	    arc2.x += 1;
	  }
	
	  function start() {
	    animationLoop();
	  }
	
	  start();
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNjMwM2FmYTVkNmRiYjkyOTM4MmMiLCJ3ZWJwYWNrOi8vLy4vaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQ3RDQSxPQUFNLENBQUMsTUFBTSxHQUFHLFlBQVk7O0FBRTFCLE9BQUksTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0MsT0FBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxPQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0FBQ3hCLE9BQUksT0FBTyxhQUFDO0FBQ1osUUFBSyxDQUFDLE1BQU0sR0FBRyxZQUFNO0FBQ25CLFlBQU8sR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3QyxVQUFLLEVBQUUsQ0FBQztJQUNULENBQUM7QUFDRixRQUFLLENBQUMsR0FBRyxHQUFHLFdBQVcsQ0FBQztBQUN4QixPQUFJLEdBQUcsR0FBRyxFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7QUFDbEMsT0FBSSxJQUFJLEdBQUcsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBQyxDQUFDO0FBQ25DLE9BQUksRUFBRSxHQUFHLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFDLENBQUM7QUFDMUIsT0FBSSxFQUFFLEdBQUcsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUMsQ0FBQztBQUMxQixPQUFJLEVBQUUsR0FBRyxFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBQyxDQUFDO0FBQzFCLE9BQUksRUFBRSxHQUFHLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFDLENBQUM7O0FBRTFCLFlBQVMsYUFBYSxHQUFHOztBQUV2QixTQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFO0FBQ2YsYUFBTSxDQUFDLHFCQUFxQixDQUFDLGFBQWEsQ0FBQyxDQUFDO01BQzdDOztBQUVELFFBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDOzs7O0FBSTdCLFFBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3JDLFFBQUcsQ0FBQyx3QkFBd0IsR0FBQyxnQkFBZ0IsQ0FBQzs7QUFFOUMsUUFBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2hCLFFBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLFFBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsUUFBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QixRQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDaEIsUUFBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxRQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELFFBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7QUFFWCxRQUFHLENBQUMsd0JBQXdCLEdBQUMsYUFBYSxDQUFDOztBQUUzQyxPQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNWLE9BQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ1YsT0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDVixPQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNWLFFBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ1gsU0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDYjs7QUFHRCxZQUFTLEtBQUssR0FBRztBQUNmLGtCQUFhLEVBQUUsQ0FBQztJQUNqQjs7QUFFRCxRQUFLLEVBQUUsQ0FBQztFQUVULEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiB3ZWJwYWNrL2Jvb3RzdHJhcCA2MzAzYWZhNWQ2ZGJiOTI5MzgyY1xuICoqLyIsIndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xuICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgbGV0IHF1YWxtID0gbmV3IEltYWdlKCk7XG4gIGxldCBwYXR0ZXJuO1xuICBxdWFsbS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgcGF0dGVybiA9IGN0eC5jcmVhdGVQYXR0ZXJuKHF1YWxtLCBcInJlcGVhdFwiKTtcbiAgICBzdGFydCgpO1xuICB9O1xuICBxdWFsbS5zcmMgPSBcInF1YWxtLnBuZ1wiO1xuICBsZXQgYXJjID0ge3g6IDMwMCwgeTogMTI1LCByOiA1MH07XG4gIGxldCBhcmMyID0ge3g6IDEwMCwgeTogMTI1LCByOiA1MH07XG4gIGxldCBwMSA9IHt4OiAxMDAsIHk6IDEwMH07XG4gIGxldCBwMiA9IHt4OiAzMDAsIHk6IDEwMH07XG4gIGxldCBwMyA9IHt4OiAzMDAsIHk6IDE1MH07XG4gIGxldCBwNCA9IHt4OiAxMDAsIHk6IDE1MH07XG5cbiAgZnVuY3Rpb24gYW5pbWF0aW9uTG9vcCgpIHtcblxuICAgIGlmIChhcmMueCA8IDc1MCkge1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRpb25Mb29wKTtcbiAgICB9XG5cbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIDgwMCwgNjAwKTtcbiAgICAvLyBjdHguZmlsbFN0eWxlID0gcGF0dGVybjtcbiAgICAvLyBjdHguZmlsbFJlY3QoMCwgMCwgODAwLCA2MDApO1xuXG4gICAgY3R4LmRyYXdJbWFnZShxdWFsbSwgMCwgMCwgODAwLCA2MDApO1xuICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb249J2Rlc3RpbmF0aW9uLWluJztcblxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKHAxLngsIHAxLnkpO1xuICAgIGN0eC5saW5lVG8ocDIueCwgcDIueSk7XG4gICAgY3R4LmxpbmVUbyhwMy54LCBwMy55KTtcbiAgICBjdHgubGluZVRvKHA0LngsIHA0LnkpO1xuICAgIGN0eC5saW5lVG8ocDEueCwgcDEueSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5hcmMoYXJjLngsIGFyYy55LCBhcmMuciwgMCwgMiAqIE1hdGguUEkpO1xuICAgIGN0eC5hcmMoYXJjMi54LCBhcmMyLnksIGFyYzIuciwgMCwgMiAqIE1hdGguUEkpO1xuICAgIGN0eC5maWxsKCk7XG5cbiAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uPSdzb3VyY2Utb3Zlcic7XG5cbiAgICBwMS54ICs9IDE7XG4gICAgcDIueCArPSAxO1xuICAgIHAzLnggKz0gMTtcbiAgICBwNC54ICs9IDE7XG4gICAgYXJjLnggKz0gMTtcbiAgICBhcmMyLnggKz0gMTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgYW5pbWF0aW9uTG9vcCgpO1xuICB9XG5cbiAgc3RhcnQoKTtcblxufTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vaW5kZXguanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9